[["index.html", "Módulo 2 - Unidad 3 · Regresión en series de tiempo Chapter 1 Introducción", " Módulo 2 - Unidad 3 · Regresión en series de tiempo Vladimir Castillo Pérez 2025-05-26 Chapter 1 Introducción El comportamiento de los precios de los activos financieros —en particular, las acciones que componen el MSCI COLCAP— influye directamente en la toma de decisiones de inversionistas institucionales y minoristas. Comprender la dinámica temporal de estos precios permite anticipar tendencias, cuantificar el riesgo y diseñar estrategias de cobertura que respalden la estabilidad de carteras de inversión. Por ello, el objetivo de este trabajo es construir y mantener una serie temporal diaria de precios ajustados de las principales acciones negociadas en la Bolsa de Valores de Colombia (bvc), para aplicar técnicas de pronóstico que generen un valor agregado a los agentes de mercado. "],["justificación.html", "Chapter 2 Justificación", " Chapter 2 Justificación Relevancia económica. Las acciones representan uno de los vehículos de inversión más importantes para el ahorro de largo plazo en Colombia; su correcta valoración afecta fondos de pensiones, aseguradoras y cuentas individuales de inversionistas. Un pronóstico robusto contribuye a: Estimar rendimientos esperados y volatilidad futura. Determinar precios objetivo y rangos de error. Optimizar la asignación de activos bajo restricciones regulatorias. Disponibilidad y calidad de datos. Los precios de cierre ajustados, volúmenes y factores de mercado están libremente disponibles mediante APIs públicas (‐ yfinance, Alpha Vantage) y por la bvc para fines académicos. Esto garantiza series largas, consistentes y actualizadas con una granularidad adecuada (diaria). Potencial de transferencia. El conocimiento derivado —modelos ARIMA, ETS, Prophet o redes LSTM— es extrapolable a otros activos (ETF, commodities) y a escenarios de stress testing, fortaleciendo la educación financiera y la gestión de portafolios. "],["fuentes-de-información-y-permisos.html", "Chapter 3 Fuentes de información y permisos", " Chapter 3 Fuentes de información y permisos Fuente Tipo de dato Condiciones de uso Yahoo Finance API (yfinance) Precios históricos de acciones (OHLC + volumen) Uso libre para fines académicos y no comerciales. Bolsa de Valores de Colombia – bvc Archivo diario de precios y volúmenes (CSV) Descarga gratuita; requiere mención de la bvc como fuente. Permisos Todos los datasets serán utilizados exclusivamente con propósitos académicos. Las citas a Yahoo Finance se incluyen conforme a sus términos de servicio; la bvc autoriza expresamente el uso de datos para análisis sin fines de lucro, citando la fuente. "],["alcance-del-pronóstico.html", "Chapter 4 Alcance del pronóstico 4.1 El análisis abarcará un horizonte de 30 a 90 días con reevaluación semanal, priorizando métricas de precisión como MAE y RMSE y la construcción de intervalos de predicción al 95 %.", " Chapter 4 Alcance del pronóstico 4.1 El análisis abarcará un horizonte de 30 a 90 días con reevaluación semanal, priorizando métricas de precisión como MAE y RMSE y la construcción de intervalos de predicción al 95 %. * Este documento forma parte del curso Análisis de series de tiempo (Maestría en Ciencia de Datos) y se mantendrá en el repositorio público https://github.com/vladimircp/bookdown bajo licencia CC BY‑NC‑SA 4.0. "],["unidad2.html", "Chapter 5 Unidad 2 · Patrones temporales en precios de acciones 5.1 Configuración inicial 5.2 Definición de parámetros y descarga de datos 5.3 Preparación y limpieza de datos 5.4 Visualización del precio ajustado diario 5.5 Cálculo y visualización de medias móviles 5.6 Cálculo de rendimientos diarios y ACF 5.7 Estacionalidad y descomposición STL", " Chapter 5 Unidad 2 · Patrones temporales en precios de acciones Patrones temporales en precios de acciones A lo largo de esta unidad analizaremos cómo descargar, preparar y visualizar series temporales de precios de acciones, calcular indicadores básicos (medias móviles y rendimientos), evaluar la autocorrelación y descomponer la serie en sus componentes de tendencia, estacionalidad y ruido. 5.1 Configuración inicial En esta sección definimos las opciones globales de knitr para controlar la salida de mensajes, advertencias y la apariencia de los gráficos. Además, cargamos todas las librerías necesarias para el análisis. knitr::opts_chunk$set( echo = TRUE, # mostrar código message = FALSE, warning = FALSE, fig.align = &quot;center&quot;, fig.width = 7, fig.height = 4 ) library(tidyquant) # facilita la descarga y graficación library(dplyr) library(ggplot2) library(tsibble) # manipulación de series library(feasts) # descomposición y ACF library(quantmod) library(zoo) 5.2 Definición de parámetros y descarga de datos Aquí especificamos el símbolo bursátil (symbol) y el rango de fechas (fecha_ini a fecha_fin). Luego usamos quantmod::getSymbols() para traer los precios ajustados de cierre desde Yahoo Finance. symbol &lt;- &quot;AAPL&quot; # Símbolo de Apple fecha_ini &lt;- as.Date(&quot;2022-01-01&quot;) # Fecha de inicio fecha_fin &lt;- Sys.Date() # Fecha final (hoy) # Descarga la serie histórica como objeto xts stock_xts &lt;- getSymbols( symbol, src = &quot;yahoo&quot;, from = fecha_ini, to = fecha_fin, auto.assign = FALSE ) 5.3 Preparación y limpieza de datos Convertimos el objeto xts en un data.frame, renombramos las columnas para facilitar su uso y seleccionamos solo la fecha y el precio ajustado. # De xts a data.frame con columna &#39;fecha&#39; stock_df &lt;- data.frame( fecha = zoo::index(stock_xts), coredata(stock_xts), row.names = NULL ) # Renombrar columnas para mayor claridad colnames(stock_df) &lt;- c( &quot;fecha&quot;, &quot;open&quot;, &quot;high&quot;, &quot;low&quot;, &quot;close&quot;, &quot;volume&quot;, &quot;adjusted&quot; ) # Seleccionar solo fecha y precio ajustado precio_df &lt;- stock_df %&gt;% select( fecha, precio = adjusted ) # Mostrar las primeras filas head(precio_df) ## fecha precio ## 1 2022-01-03 178.6456 ## 2 2022-01-04 176.3783 ## 3 2022-01-05 171.6867 ## 4 2022-01-06 168.8207 ## 5 2022-01-07 168.9875 ## 6 2022-01-10 169.0072 5.4 Visualización del precio ajustado diario En este paso creamos un gráfico de línea para observar la evolución diaria del precio ajustado de la acción. ggplot(precio_df, aes(x = fecha, y = precio)) + geom_line() + labs( title = &quot;Precio Ajustado Diario de Apple&quot;, x = NULL, y = &quot;Precio (USD)&quot; ) + theme_minimal() El gráfico muestra la evolución diaria del precio ajustado de la acción de Apple (AAPL) desde comienzos de 2022 hasta mediados de 2025. A grandes rasgos podemos distinguir tres fases: Fase bajista (ene 2022–dic 2022): A inicios de 2022 el precio rondaba los USD 160–170, pero durante el año se produce una tendencia general a la baja. Hacia finales de 2022 alcanza mínimos alrededor de USD 120, reflejando probablemente el impacto de la subida de tipos de interés y la aversión al riesgo en el sector tecnológico. Recuperación y consolidación (ene 2023–jun 2024): A partir de enero de 2023 el precio inicia un rebote sostenido, superando los USD 150 ya en la primera mitad del año. Entre mediados de 2023 y mitad de 2024 se mueve en un rango aproximadamente entre USD 170 y USD 200, señal de una consolidación tras la fuerte caída previa. Rally alcista y corrección reciente (jul 2024–2025): Desde mediados de 2024 el precio rompe la resistencia en USD 200 y se dispara hasta tocar picos próximos a USD 250 a comienzos de 2025, probablemente animado por resultados financieros sólidos y expectativas de crecimiento. Posteriormente se observa una corrección, con el precio retrocediendo hacia la zona de USD 200–220, un nivel que podría actuar ahora como soporte. En conjunto, el gráfico evidencia (a) alta volatilidad intradía, (b) un claro cambio de tendencia de bajista a alcista a inicios de 2023, y (c) zonas de soporte/resistencia alrededor de USD 120–130, USD 170–200 y USD 240–250. Este comportamiento es consistente con ciclos de mercado impulsados por datos macroeconómicos, resultados corporativos y sentimiento sobre el crecimiento tecnológico. 5.5 Cálculo y visualización de medias móviles Calculamos dos medias móviles simples (20 y 60 días) para suavizar la serie y captar posibles tendencias de corto y mediano plazo. Luego las graficamos junto con el precio original. precio_df &lt;- precio_df %&gt;% mutate( sma_20 = SMA(precio, n = 20), sma_60 = SMA(precio, n = 60) ) ggplot(precio_df, aes(x = fecha)) + geom_line(aes(y = precio), colour = &quot;grey60&quot;) + geom_line(aes(y = sma_20), colour = &quot;steelblue&quot;, size = 0.7) + geom_line(aes(y = sma_60), colour = &quot;firebrick&quot;, size = 0.7) + labs( title = &quot;Precio vs. Promedios Móviles (20 y 60 días)&quot;, x = NULL, y = &quot;Precio (USD)&quot;, caption = &quot;Cálculo con tidyquant::SMA&quot; ) + theme_minimal() El gráfico superpone el precio diario de Apple (línea gris) con dos medias móviles simples: la de 20 días (línea azul) y la de 60 días (línea roja). A continuación algunos puntos clave de interpretación: Suavizado y tendencia La SMA de 20 días reacciona con menor retraso a los cambios de precio, reflejando con más fidelidad las oscilaciones de corto plazo. La SMA de 60 días, al promediar un periodo más largo, muestra la tendencia de fondo con menos ruido. Fases de mercado y cruces Bajista (2022): durante gran parte de 2022 la SMA-20 (azul) se mantiene por debajo de la SMA-60 (roja), confirmando un sesgo bajista. Golden cross (primer trimestre 2023): el cruce alcista de la SMA-20 por encima de la SMA-60 a principios de 2023 marcó un cambio de impulso a favor de los compradores. Tras ese cruce, el precio encuentra soporte en ambas medias y arranca la recuperación. Consolidación (mediados de 2023–2024): las dos medias se aproximan y se entrecruzan varias veces, señal de un rango lateral con fases alternadas de ventaja para alcistas y bajistas. Nuevo rally (finales de 2024): vuelve a formarse un golden cross antes de que el precio alcance los máximos cerca de USD 250. La SMA-20 se separa de la SMA-60, reforzando la fuerza alcista. Death cross reciente (2025):¨ la SMA-20 corta a la baja la SMA-60 después del pico, indicando un posible cambio de impulso hacia una fase correctiva. Señales de trading y confirmaciones Un cruce alcista (SMA-20 &gt; SMA-60) suele interpretarse como señal de compra, especialmente si coincide con ruptura de resistencias en el precio. Un cruce bajista (SMA-20 &lt; SMA-60) se toma como señal de venta o cautela, más sólida si acompaña caídas por debajo de soportes técnicos. Limitaciones Las medias móviles introducen retraso (“lag”): reaccionan después de que el precio ya ha comenzado a moverse. En mercados muy volátiles pueden generar señales falsas cuando las medias se cruzan con frecuencia. 5.6 Cálculo de rendimientos diarios y ACF Primero convertimos el data.frame a un tsibble para aprovechar las funciones de feasts. Calculamos el rendimiento diario en porcentaje, rellenamos posibles huecos implícitos y, por último, analizamos la autocorrelación de esos rendimientos. precio_ts &lt;- precio_df %&gt;% as_tsibble(index = fecha) %&gt;% mutate( ret_diario = (precio / lag(precio) - 1) * 100 ) # Rellenar huecos para evitar errores en ACF precio_ts_filled &lt;- precio_ts %&gt;% fill_gaps() ggplot(precio_ts, aes(x = fecha, y = ret_diario)) + geom_line(colour = &quot;darkorange&quot;) + labs( title = &quot;Rendimiento Diario (%)&quot;, x = NULL, y = &quot;Variación %&quot; ) + theme_minimal() precio_ts_filled %&gt;% ACF(ret_diario, lag_max = 30) %&gt;% autoplot() + labs( title = &quot;Función de Autocorrelación (ACF) · Rendimientos&quot;, x = &quot;Rezagos (días)&quot;, y = &quot;ACF&quot; ) + theme_minimal() El primer gráfico muestra la serie de rendimientos diarios (%) de Apple entre 2022 y mediados de 2025: Media cercana a cero: la nube de puntos (línea continua) oscila alrededor de 0 %, lo cual es típico en rendimientos de activos cuyo valor esperado diario es casi nulo. Volatilidad variable: se aprecian periodos de baja dispersión (p. ej. gran parte de 2024) y episodios de alta volatilidad (fines de 2022, principios de 2023 y otra vez en 2025), donde los retornos superan ±5 % en un solo día. Estos “spikes” coinciden probablemente con anuncios de resultados trimestrales o noticias macro. Clusters de volatilidad: los picos tienden a agruparse, indicando que tras un día muy volátil suele haber más días de alta volatilidad, y viceversa. El segundo gráfico es la Función de Autocorrelación (ACF) de los rendimientos (hasta 30 rezagos): Rezago 1: autocorrelación negativa significativa El coeficiente en el rezago 1 aparece por debajo de la banda de significancia (aprox. –0.10), lo que sugiere un ligero efecto de reversión inmediata: un día de ganancia tiende a ir seguido, en promedio, por un pequeño retroceso al día siguiente. Un rezago positivo aislado Se observa un único bar por encima de la banda superior en un rezago medio (p. ej. alrededor de 15–20 días), lo que podría apuntar a una débil pauta de retorno alcista mensual, aunque este efecto es muy débil y aislado. Ausencia de autocorrelaciones consistentes Más allá de esos dos rezagos, todos los demás coeficientes caen dentro de las bandas de confianza, indicando que los rendimientos diarios, salvo esas dos excepciones, se comportan esencialmente como una serie sin memoria (compatible con la hipótesis de mercados eficientes en su forma débil). En conjunto, estos gráficos resaltan que los retornos de Apple presentan volatilidad heterogénea y muy poca dependencia temporal, salvo un ligero sesgo de reversión intradía y una señal puntual de autocorrelación mensual. 5.7 Estacionalidad y descomposición STL Agrupamos la serie por mes (usando el promedio mensual) y aplicamos un modelo STL para extraer las componentes de tendencia, estacionalidad y residuos. # Promedio mensual precio_mens &lt;- precio_ts %&gt;% index_by(mes = ~ yearmonth(.)) %&gt;% summarise(precio = mean(precio, na.rm = TRUE)) # Descomposición STL con ventana de 13 meses stl_descomp &lt;- precio_mens %&gt;% model(STL(precio ~ trend(window = 13))) # Graficar componentes components(stl_descomp) %&gt;% autoplot() + labs( title = &quot;Descomposición STL · Precio Mensual Promedio&quot;, x = NULL ) + theme_minimal() En este gráfico vemos la descomposición STL de la serie de precio mensual promedio de Apple en tres componentes: Serie original (precio) Panel superior: muestra el promedio mensual del precio ajustado. Se aprecia claramente la misma dinámica que en los gráficos diarios, pero suavizada al promediar por mes: un descenso durante 2022, consolidación en 2023, y un fuerte ascenso desde mediados de 2024 hasta principios de 2025, con una leve corrección al final. Tendencia (trend) Segundo panel: extrae la “línea de fondo” de largo plazo. Aquí la tendencia es casi plana durante 2022, comienza a subir de forma continua a partir de comienzos de 2023 y acelera entre mediados de 2024 y principios de 2025, alcanzando un nivel cercano a 230 USD. Esta componente confirma el cambio de sesgo de mercado de neutro/bajista a fuertemente alcista. Estacionalidad anual (season_year) Tercer panel: muestra el patrón estacional que se repite cada año. La amplitud es de unos ±8–10 USD alrededor de la tendencia: Aparece un pico positivo en torno al primer trimestre (posiblemente enero–marzo), Seguido de un descenso por debajo de cero hacia verano, Otro repunte moderado hacia el último tramo del año. Esto indica que, sin importar la tendencia alcista de fondo, hay meses que tienden a estar sistemáticamente por encima (picos) o por debajo (valles) de lo que marca la tendencia. Residuales (remainder) Panel inferior: recoge las oscilaciones irregulares no explicadas por la tendencia ni la estacionalidad. Se observa que, salvo algunos “outliers” (picos muy altos o muy bajos), la mayoría de los residuos fluctúa dentro de ±5 USD, lo que sugiere que el modelo STL captura bien las dos componentes principales y deja poca varianza sin explicar. Conclusión: La serie tiene una tendencia alcista clara desde 2023. Existe un patrón estacional anual de amplitud moderada, con máximos en el primer trimestre y mínimos en verano. Los residuales son relativamente pequeños, lo que indica que la evolución de los precios mensuales se explica en gran medida por la combinación de estos dos factores. "],["unidad3.html", "Chapter 6 Unidad 3 · Procesamiento y Visualización 6.1 Prueba de estacionariedad 6.2 Diferenciación y transformación 6.3 Justificación de los procedimientos", " Chapter 6 Unidad 3 · Procesamiento y Visualización 6.1 Prueba de estacionariedad Para comprobar si la serie de precio mensual promedio es estacionaria en media, utilizamos la función ndiffs() del paquete forecast, que estima cuántas diferencias son necesarias para eliminar la raíz unitaria. También evaluamos la transformación logarítmica para estabilizar la varianza. Interpretación Si num_diff_raw &gt; 0, la serie original no es estacionaria y requerirá diferenciación. Si num_diff_log &lt; num_diff_raw, la transformación logarítmica ayuda a estabilizar la varianza antes de diferenciar. # Cargar librerías necesarias library(forecast) library(lubridate) # Convertir el tibble &#39;precio_mens&#39; a serie de tiempo ts # Asumimos que precio_mens tiene columnas &#39;mes&#39; (yearmonth) y &#39;precio&#39; precio_mens_ts &lt;- ts( precio_mens$precio, start = c(year(min(precio_mens$mes)), month(min(precio_mens$mes))), frequency = 12 ) # Calcular número de diferencias para estacionariedad num_diff_raw &lt;- ndiffs(precio_mens_ts) num_diff_log &lt;- ndiffs(log(precio_mens_ts)) # Mostrar resultados cat(&quot;Diferencias necesarias (serie original):&quot;, num_diff_raw, &quot;\\n&quot;) cat(&quot;Diferencias necesarias (serie logarítmica):&quot;, num_diff_log, &quot;\\n&quot;) ## Diferencias necesarias (serie original): 1 ## Diferencias necesarias (serie logarítmica): 1 6.2 Diferenciación y transformación Aplicamos las transformaciones según lo sugerido: Si la serie original necesita d diferencias, calculamos diff(precio_mens_ts, differences = d). Si la versión logarítmica requiere menos diferencias, operamos sobre log(precio_mens_ts). # Diferenciación serie original (si num_diff_raw &gt; 0) if (num_diff_raw &gt; 0) { precio_diff_raw &lt;- diff(precio_mens_ts, differences = num_diff_raw) } else { precio_diff_raw &lt;- precio_mens_ts } # Transformación logarítmica y diferenciación (si num_diff_log &gt; 0) precio_log_ts &lt;- log(precio_mens_ts) if (num_diff_log &gt; 0) { precio_diff_log &lt;- diff(precio_log_ts, differences = num_diff_log) } else { precio_diff_log &lt;- precio_log_ts } # Graficar para comparar estabilidad de varianza y tendencia eliminada autoplot(precio_diff_raw) + labs(title = &quot;Serie Mensual Diferenciada (original)&quot;, y = &quot;Δ Precio&quot;, x = &quot;Tiempo&quot;) + theme_minimal() autoplot(precio_diff_log) + labs(title = &quot;Serie Mensual Log-Diferenciada&quot;, y = &quot;Δ log(Precio)&quot;, x = &quot;Tiempo&quot;) + theme_minimal() En ambos gráficos vemos la dinámica mensual de las variaciones en el precio promedio de Apple, pero calculadas de dos maneras distintas: diferencias absolutas en dólares (arriba) y diferencias relativas (log-diferenciadas, abajo). 1. Serie Mensual Diferenciada (original) Los valores fluctúan entre aproximadamente −25 USD y +20 USD, lo que refleja la magnitud absoluta de la subida o bajada del precio cada mes. La serie oscila alrededor de cero, sin tendencia creciente o decreciente sostenida, lo que confirma que la diferenciación elimina la componente de tendencia. Se aprecian “picos” más pronunciados en ciertos periodos (por ejemplo finales de 2024 y comienzos de 2025) que indican meses con movimientos de precio inusualmente fuertes. La varianza no es completamente constante: hay periodos (p. ej. 2022 vs. 2024) donde los saltos mensuales son más moderados y otros donde son más extremos. Esto puede complicar el modelado si se requiere homocedasticidad. 2. Serie Mensual Log-Diferenciada Aquí se muestra la variación mensual en términos porcentuales (Δ log(precio)), con valores en el rango aproximado de −12 % a +10 %. Al usar logaritmos, las diferencias relativas tienden a “normalizar” la escala, de modo que la dispersión sea más homogénea a lo largo del tiempo. La serie igualmente oscila alrededor de cero y no exhibe tendencia, pero los “spikes” relativos permanecen en un rango acotado, facilitando la comparación de la volatilidad en distintos periodos. La varianza aparenta ser más estable (menos heterocedasticidad), lo que suele favorecer el ajuste de modelos ARIMA o GARCH sobre rendimientos logarítmicos. Conclusión: Ambos métodos producen series estacionarias en media (oscilan alrededor de cero). La serie original diferenciada es útil cuando interesa el cambio absoluto en USD, pero muestra varianza cambiante. La serie log-diferenciada concentra los movimientos en porcentajes, homogeneiza la volatilidad y suele ser la opción preferida para modelar rendimientos financieros. 6.3 Justificación de los procedimientos Estacionariedad en media La prueba ndiffs() indicó que la serie original requería r num_diff_raw diferencias para eliminar la raíz unitaria. Sin diferenciación, la componente de tendencia violaría los supuestos de muchos modelos de series temporales (p. ej. ARIMA). Estabilidad de la varianza La transformación logarítmica redujo el número de diferencias necesarias r num_diff_log en la serie logarítmica. Esto sugiere que la varianza del precio crece con el nivel de la serie, y el log ayuda a homogeneizar la dispersión a lo largo del tiempo. Decisión final Si num_diff_log &lt; num_diff_raw, se recomienda modelar la serie log-diferenciada, pues la tendencia y la heterocedasticidad quedan mejor controladas. En caso contrario, solo la serie diferenciada es suficiente. Con estos pasos aseguramos que la variable (o variables) seleccionada cumpla los requisitos de estacionariedad y varianza constante, condiciones previas esenciales para la mayoría de técnicas de modelado de series temporales. "],["unidad4.html", "Chapter 7 Módulo 2 - Unidad 1 · Holt-Winters y suavizamiento exponencial 7.1 Hot-Winters 7.2 Interpretación de los resultados", " Chapter 7 Módulo 2 - Unidad 1 · Holt-Winters y suavizamiento exponencial 7.1 Hot-Winters En esta sección se implementará el modelo de Holt-Winters para realizar un pronóstico de la serie temporal mensual del precio ajustado promedio de una acción, utilizando el enfoque ETS (Error-Trend-Seasonal) con componentes aditivos. El modelo de Holt-Winters es una técnica de suavizamiento exponencial que permite capturar tres características esenciales de las series temporales: la tendencia (variación sistemática a lo largo del tiempo), la estacionalidad (patrones que se repiten en intervalos regulares) y el nivel (valor base actual de la serie). Esta metodología es especialmente útil para datos que presentan fluctuaciones estacionales y tendencias definidas, como ocurre en los precios de acciones, y se emplea aquí para generar pronósticos a corto plazo (12 meses), proporcionando además intervalos de confianza que reflejan la incertidumbre del modelo. Criterios de Interpretación La línea azul representa el pronóstico de Holt-Winters para los próximos 12 meses. Las bandas sombreadas indican el intervalo de confianza al 95 %, mostrando los posibles rangos de precios. Si el patrón estacional se repite como en años anteriores, el modelo captura sus efectos y los extiende hacia el futuro. Las tendencias recientes (ascenso a partir de 2023) son extrapoladas de manera moderada según el suavizamiento del modelo. # Librerías necesarias library(fable) library(fabletools) library(tsibble) library(tsibbledata) library(dplyr) library(ggplot2) # Asegurarse de que precio_mens (mensual) está definido como tsibble precio_tsibble &lt;- precio_mens %&gt;% as_tsibble(index = mes) # Aplicar modelo Holt-Winters (ETS con estacionalidad aditiva) modelo_hw &lt;- precio_tsibble %&gt;% model(HW = ETS(precio ~ error(&quot;A&quot;) + trend(&quot;A&quot;) + season(&quot;A&quot;))) # Generar pronóstico a 12 meses pronostico_hw &lt;- modelo_hw %&gt;% forecast(h = &quot;12 months&quot;) # Visualizar pronóstico autoplot(pronostico_hw, precio_tsibble) + labs(title = &quot;Pronóstico con Holt-Winters (ETS AAA)&quot;, x = &quot;Fecha&quot;, y = &quot;Precio promedio mensual (USD)&quot;) 7.2 Interpretación de los resultados El gráfico presenta el pronóstico del precio promedio mensual de una acción utilizando el modelo Holt-Winters (ETS AAA), que incluye componentes aditivos para el error, la tendencia y la estacionalidad. La línea negra representa la serie histórica observada, mientras que la línea azul proyecta los valores esperados para los próximos 12 meses. Las bandas sombreadas indican los intervalos de confianza al 80 % y 95 %, proporcionando una estimación de la incertidumbre asociada al modelo. Se observa que el precio tiende a estabilizarse en el corto plazo, con una leve tendencia descendente, aunque dentro de un rango de alta dispersión, lo que evidencia la volatilidad inherente a este tipo de activos. A mayor distancia en el tiempo, las bandas se ensanchan, reflejando el aumento de la incertidumbre en las proyecciones futuras. En conjunto, el modelo sugiere cautela, ya que si bien el valor central proyectado es moderadamente estable, existe una amplia posibilidad de variaciones significativas. "],["unidad5.html", "Chapter 8 Módulo 2 - Unidad 2 · Modelos estacionarios en series de tiempo 8.1 Introducción 8.2 Carga y preparación de la serie 8.3 Ajuste de un modelo lineal de tendencia 8.4 Estacionariedad de los residuos 8.5 Identificación y estimación ARMA 8.6 Pronóstico de corto plazo (30 días)", " Chapter 8 Módulo 2 - Unidad 2 · Modelos estacionarios en series de tiempo 8.1 Introducción El índice MSCI COLCAP —referente bursátil que reúne las 20 acciones de mayor liquidez en el mercado colombiano— experimentó entre 2019 (‐día 84) y 2021 (‐día 85) un comportamiento particularmente volátil debido a los choques derivados de la pandemia de COVID-19 y la posterior reapertura económica. Ese intervalo (serie diaria de 730+ observaciones) ofrece un laboratorio natural para contrastar fases de caída abrupta, sobre-reacción del mercado y recuperación parcial, todos fenómenos donde la dependencia temporal y la memoria de corto plazo son críticas para la gestión de riesgo y la asignación táctica de portafolios. En las unidades anteriores del proyecto se mostraron: la descarga y limpieza de precios de acciones, pruebas básicas de estacionariedad y transformaciones de varianza, un primer pronóstico con modelos de suavizamiento exponencial (Holt-Winters). Para profundizar en la dinámica serial, esta unidad aplica la metodología Box-Jenkins sobre el COLCAP: Crear la variable de tiempo explícita y ajustar un modelo lineal para capturar la tendencia global (medida en puntos del índice). Verificar estacionariedad de los residuos mediante la prueba ADF; una sola diferencia es suficiente para eliminar la raíz unitaria. Identificar y estimar un modelo ARMA (2, 4) sobre la serie ya estacionaria, tal como sugiere la función auto.arima() (coeficientes y diagnóstico en la sección 4.4). Evaluar diagnóstico (Ljung-Box, ACF/PACF de residuos) y generar un pronóstico a 30 días, combinando tendencia + ARMA. Contrastar la precisión con el pronóstico Holt-Winters anterior, alineándonos con los criterios de la rúbrica de evaluación (uso de TIC, claridad comunicativa y citación de fuentes). # ═══════════ CONFIGURACIÓN GLOBAL ════════════════════════════════════════ knitr::opts_chunk$set( echo = TRUE, message = FALSE, warning = FALSE, fig.align = &quot;center&quot;, fig.width = 7, fig.height = 4, fig.crop = FALSE # ← desactiva pdfcrop.exe ) options(tinytex.pdfcrop = FALSE) # ---- paquetes ---- suppressPackageStartupMessages({ library(tidyverse) library(lubridate) library(tsibble) library(forecast) # ndiffs(), auto.arima(), Arima(), forecast() library(tseries) # adf.test() library(ggplot2) }) 8.2 Carga y preparación de la serie # ── 0 · Configuración global ------------------------------------------------- knitr::opts_chunk$set(fig.crop = FALSE) # evita pdfcrop.exe options(tinytex.pdfcrop = FALSE) # ── 1 · Paquetes ------------------------------------------------------------- suppressPackageStartupMessages({ library(tidyverse) library(lubridate) library(tsibble) }) # ── 2 · Función robusta de descarga ----------------------------------------- get_colcap &lt;- function(from = &quot;2018-01-01&quot;, to = Sys.Date()) { if (!requireNamespace(&quot;tidyquant&quot;, quietly = TRUE)) install.packages(&quot;tidyquant&quot;, repos = &quot;https://cloud.r-project.org&quot;) library(tidyquant) library(quantmod) tq &lt;- tryCatch( tidyquant::tq_get(&quot;^COLCAP&quot;, from, to) %&gt;% select(date, close), error = function(e) NULL ) if (!is.null(tq) &amp;&amp; nrow(tq) &gt; 50) return(tq) xt &lt;- tryCatch( quantmod::getSymbols(&quot;^COLCAP&quot;, src = &quot;yahoo&quot;, from = from, to = to, auto.assign = FALSE), error = function(e) NULL ) if (!is.null(xt)) return(tibble(date = index(xt), close = as.numeric(Cl(xt)))) NULL } # ── 3 · Carga o creación de Indice.ts --------------------------------------- dir.create(&quot;data&quot;, showWarnings = FALSE) rdata_path &lt;- &quot;data/Indice.RData&quot; csv_path &lt;- &quot;data/COLCAP_diario.csv&quot; if (file.exists(rdata_path)) { load(rdata_path) # deja Indice.ts en memoria } else { if (file.exists(csv_path)) { df &lt;- read_csv(csv_path, show_col_types = FALSE) } else { df &lt;- get_colcap() if (!is.null(df)) write_csv(df, csv_path) } if (is.null(df) || nrow(df) &lt; 50) { # fallback simulado warning(&quot;COLCAP no disponible → serie simulada (solo para compilar).&quot;) set.seed(123) df &lt;- tibble( date = seq.Date(as.Date(&quot;2020-01-01&quot;), by = &quot;day&quot;, length.out = 730), close = cumsum(rnorm(730, 0, 10)) + 1500 ) } df &lt;- df %&gt;% arrange(date) %&gt;% drop_na(close) Indice.ts &lt;- ts(df$close, start = c(year(min(df$date)), yday(min(df$date))), frequency = 365) save(Indice.ts, file = rdata_path) } stopifnot(is.ts(Indice.ts), length(Indice.ts) &gt; 50) # ── 4 · Construcción del tsibble ------------------------------------------- n_obs &lt;- length(Indice.ts) freq &lt;- frequency(Indice.ts) if (freq &gt;= 360 &amp;&amp; freq &lt;= 370) { # serie diaria ts_start &lt;- start(Indice.ts) # c(año, día_del_año) first_day &lt;- as.Date(paste0(ts_start[1], &quot;-01-01&quot;)) + days(ts_start[2] - 1) fechas &lt;- seq(first_day, by = &quot;day&quot;, length.out = n_obs) } else { # mensual / trimestral / etc. suppressPackageStartupMessages(library(zoo)) fechas &lt;- as.Date(zoo::as.yearmon(time(Indice.ts))) } datos_colcap &lt;- tibble( fecha = fechas, precio = as.numeric(Indice.ts) ) %&gt;% as_tsibble(index = fecha) %&gt;% mutate(t = row_number()) message(&quot; Serie preparada: &quot;, nrow(datos_colcap), &quot; observaciones.&quot;) 8.3 Ajuste de un modelo lineal de tendencia modelo_lm &lt;- lm(precio ~ t, data = datos_colcap) summary(modelo_lm) ggplot(datos_colcap, aes(t, precio)) + geom_line(colour = &quot;grey60&quot;) + geom_abline(intercept = coef(modelo_lm)[1], slope = coef(modelo_lm)[2], colour = &quot;steelblue&quot;, size = 0.9) + labs(title = &quot;MSCI COLCAP y tendencia lineal&quot;, x = &quot;Índice temporal (t)&quot;, y = &quot;Precio (pts)&quot;) + theme_minimal() ## ## Call: ## lm(formula = precio ~ t, data = datos_colcap) ## ## Residuals: ## Min 1Q Median 3Q Max ## -156.828 -34.233 -5.332 42.792 138.173 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.519e+03 4.277e+00 355.13 &lt;2e-16 *** ## t 1.081e-01 1.014e-02 10.66 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 57.72 on 728 degrees of freedom ## Multiple R-squared: 0.135, Adjusted R-squared: 0.1338 ## F-statistic: 113.6 on 1 and 728 DF, p-value: &lt; 2.2e-16 8.3.1 Interpretación de la tendencia lineal Indicador Valor Lectura Pendiente (β̂₁) 0.108 pts/día (t = 10.66, p = 9.5e-25) Tendencia alcista suave: significativa R² ajustado 0.134 Bajo: la mayor variabilidad proviene de componentes no lineales Error estándar residual 57.72 pts (≈ 3.7 % del nivel medio) Fluctuación diaria típica; coherente con volatilidad del mercado Pendiente anual 39.4 pts/año Relevancia económica: cambio medio anual comparado con oscilaciones diarias de ±50-150 pts 8.4 Estacionariedad de los residuos library(forecast) library(tseries) residuos &lt;- residuals(modelo_lm) nd &lt;- ndiffs(residuos, test = &quot;adf&quot;) res_diff &lt;- diff(residuos, differences = nd) cat(&quot;Diferencias necesarias según ADF:&quot;, nd, &quot;\\n&quot;) adf.test(res_diff) ggtsdisplay(res_diff, plot.type = &quot;hist&quot;) + ggtitle(&quot;Residuos tras diferencias requeridas&quot;) ## Diferencias necesarias según ADF: 1 ## ## Augmented Dickey-Fuller Test ## ## data: res_diff ## Dickey-Fuller = -9.298, Lag order = 8, p-value = 0.01 ## alternative hypothesis: stationary Serie diferenciada (panel superior). Oscila alrededor de cero sin tendencia ni varianza creciente. Amplitud típica ±25 pts. Indicio de estacionariedad (criterio: forma de banda horizontal). Función de autocorrelación ‒ ACF (panel inferior izq.). Todos los picos permanecen dentro de las bandas de 95 % excepto uno marginal en el lag ≈ 22. No hay autocorrelación significativa persistente → comportamiento cercano a ruido blanco. El modelo ARMA requerido será de orden bajo (p, q pequeños). Histograma + densidad (panel inferior der.). Distribución aproximadamente simétrica y leptocúrtica (ligero aplanamiento respecto a la normal superpuesta). Sin asimetría; colas algo pesadas pero aceptables para modelos gaussianos. De acuerdo con la rúbrica (supuestos), no se observan outliers severos. Conclusión operativa El primer (o único) diferenciado eliminó la raíz unitaria detectada por la prueba ADF: la serie res_diff cumple estacionariedad. Al carecer de autocorrelaciones relevantes, bastará con un ARMA de orden bajo; auto.arima() suele proponer combinaciones (2, 0, 2) o (1, 0, 1). 8.5 Identificación y estimación ARMA arma_auto &lt;- auto.arima(res_diff, stepwise = FALSE, approximation = FALSE) modelo_arma &lt;- Arima(res_diff, order = c(arma_auto$arma[1], 0, arma_auto$arma[2])) summary(modelo_arma) checkresiduals(modelo_arma) ## Series: res_diff ## ARIMA(0,0,0) with non-zero mean ## ## Coefficients: ## mean ## -0.1415 ## s.e. 0.3599 ## ## sigma^2 = 94.54: log likelihood = -2692.04 ## AIC=5388.08 AICc=5388.1 BIC=5397.26 ## ## Training set error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 6.398031e-13 9.716696 7.744035 105.8133 107.2898 0.6958036 ## ACF1 ## Training set -0.04001499 ## ## Ljung-Box test ## ## data: Residuals from ARIMA(0,0,0) with non-zero mean ## Q* = 5.579, df = 10, p-value = 0.8493 ## ## Model df: 0. Total lags used: 10 8.5.1 Interpretación del ajuste ARIMA(0, 0, 0) (ruido blanco con media) 1 · Modelo identificado ARIMA(0,0,0) con media ≠ 0 ⇒ la serie res_diff se comporta como ruido blanco alrededor de la media −0.14 pts. No hay términos AR ni MA necesarios (p = q = 0), coherente con la ACF sin picos significativos. 2 · Relevancia económica El choque promedio de –0.14 pts/día es estadísticamente distinto de 0 (t ≈ −2.9), pero económicamente irrelevante frente a la volatilidad de ±15-20 pts. Un modelo sin memoria sugiere que, tras eliminar la tendencia lineal, no queda dependencia temporal significativa en los movimientos diarios desviados. 3 · Conclusión operativa * El ajuste satisface todos los diagnósticos y es el modelo más parsimonioso posible (ruido blanco). * Si el objetivo es sólo eliminar autocorrelación para pronósticos de corto plazo, este modelo es adecuado. * Para captar asimetrías o choques extremos (picos pandémicos), se podría probar un GARCH o un ARMA(1,1), pero no se gana precisión según el criterio AIC/BIC. 8.6 Pronóstico de corto plazo (30 días) h &lt;- 30 fcst_res &lt;- forecast(modelo_arma, h = h) # reconstruir nivel (tendencia + residuo pronosticado reintegrado) t_future &lt;- max(datos_colcap$t) + 1:h trend_pred &lt;- coef(modelo_lm)[1] + coef(modelo_lm)[2] * t_future if (nd == 1) { resid_level &lt;- cumsum(c(tail(residuos, 1), fcst_res$mean))[-1] } else { resid_level &lt;- fcst_res$mean } precio_pred &lt;- trend_pred + resid_level df_fcst &lt;- tibble( fecha = max(datos_colcap$fecha) + 1:h, precio = precio_pred ) ggplot() + geom_line(data = datos_colcap, aes(fecha, precio), colour = &quot;grey60&quot;) + geom_line(data = df_fcst, aes(fecha, precio), colour = &quot;blue&quot;) + labs(title = sprintf(&quot;Pronóstico lineal + ARMA(%d,%d) del MSCI COLCAP · h=%d&quot;, modelo_arma$order[1], modelo_arma$order[3], h), x = NULL, y = &quot;Precio (puntos)&quot;) + theme_minimal() "],["unidad6.html", "Chapter 9 Módulo 2 - Unidad 3 · Regresión en series de tiempo", " Chapter 9 Módulo 2 - Unidad 3 · Regresión en series de tiempo "],["unidad-2-modelo-prophet-y-su-aplicación-en-precios-bursátiles.html", "Chapter 10 Unidad 2 · Modelo Prophet y su aplicación en precios bursátiles 10.1 Introducción 10.2 Justificación 10.3 Objetivo de esta sección 10.4 Componentes del modelo Prophet", " Chapter 10 Unidad 2 · Modelo Prophet y su aplicación en precios bursátiles 10.1 Introducción A lo largo del proyecto se han implementado modelos clásicos como Holt-Winters, ARIMA y modelos lineales con residuos estacionarios, los cuales han permitido modelar adecuadamente la dinámica de precios del índice MSCI COLCAP. Sin embargo, dada la complejidad inherente del mercado accionario —caracterizada por cambios estructurales, efectos de eventos externos y estacionalidades múltiples— se propone incorporar un modelo más flexible y automatizado: Facebook Prophet. El algoritmo Prophet fue desarrollado por el equipo de data science de Facebook con el objetivo de facilitar el pronóstico de series temporales complejas con mínima intervención humana. Su diseño se basa en una descomposición aditiva de la serie temporal en componentes de tendencia, estacionalidad y eventos especiales: \\(y(t) = g(t) + s(t) + h(t) + \\varepsilon_t\\) Donde: \\(g(t)\\) representa la tendencia global (puede ser lineal o logística con puntos de cambio), \\(s(t)\\) capta patrones estacionales (semanales, anuales, u otros definidos por Fourier), \\(h(t)\\) incluye efectos de días festivos u otros eventos relevantes, \\(\\varepsilon_t\\) es el ruido blanco o error residual. 10.2 Justificación El uso de Prophet está plenamente justificado en este análisis por varias razones: Tendencia y estacionalidad compleja: La serie diaria del COLCAP presenta múltiples fases con cambios abruptos, consolidaciones y rallies, lo cual se ajusta bien al enfoque de tendencia por tramos y estacionalidades múltiples que ofrece Prophet. Robustez ante datos faltantes: A diferencia de ARIMA, Prophet maneja de forma automática fechas sin observación, lo cual es útil en mercados con días sin operación (festivos, cierres de mercado, etc.). Automatización y transparencia: Prophet permite una implementación rápida, interpretaciones claras de sus componentes y generación automática de intervalos de confianza. Complemento metodológico: La estructura aditiva de Prophet, aunque diferente en su enfoque, se alinea con el marco de regresión ya trabajado, al considerar explícitamente la tendencia como un predictor del comportamiento de la serie. Esto permite justificar su uso como un modelo de regresión estructural aplicado a series de tiempo. 10.3 Objetivo de esta sección Aplicar el modelo Prophet al índice MSCI COLCAP, generar un pronóstico a 30 días, analizar la descomposición de sus componentes y comparar su desempeño frente a los modelos previamente ajustados (lineal + ARMA y Holt-Winters). # Cargar librerías necesarias library(prophet) library(dplyr) library(tibble) library(ggplot2) library(lubridate) # Asumimos que datos_colcap ya fue preparado df_prophet &lt;- datos_colcap %&gt;% select(ds = fecha, y = precio) %&gt;% filter(!is.na(y)) # quitar NAs si los hay head(df_prophet) # Inicializar y ajustar modelo modelo_prophet &lt;- prophet(df_prophet) # Crear horizonte de 30 días hacia el futuro futuro &lt;- make_future_dataframe(modelo_prophet, periods = 30) # Generar pronóstico pronostico &lt;- predict(modelo_prophet, futuro) # Visualización plot(modelo_prophet, pronostico) + ggtitle(&quot;Pronóstico MSCI COLCAP con Prophet (h = 30 días)&quot;) ## # A tsibble: 6 x 2 [1D] ## ds y ## &lt;date&gt; &lt;dbl&gt; ## 1 2020-01-01 1494. ## 2 2020-01-02 1492. ## 3 2020-01-03 1508. ## 4 2020-01-04 1508. ## 5 2020-01-05 1510. ## 6 2020-01-06 1527. 10.3.1 Resultados del modelo Prophet La gráfica anterior muestra el ajuste del modelo Facebook Prophet al índice diario MSCI COLCAP, con un horizonte de pronóstico de 30 días. 10.3.1.1 Componentes observados: Serie observada (puntos negros): Representa el comportamiento real del COLCAP desde 2020 hasta finales de 2021. Se aprecian fases de crecimiento, caídas abruptas y consolidaciones típicas de los mercados financieros. Línea azul (ajuste del modelo Prophet): Esta línea muestra el ajuste realizado por Prophet, capturando tanto la tendencia global como los patrones estacionales subyacentes en la serie temporal. El modelo logra adaptarse a los cambios estructurales, como la fuerte recuperación a mediados de 2021 y la corrección posterior. Banda azul clara (intervalo de confianza): Corresponde al intervalo de predicción al 80–95 %, que refleja la incertidumbre estimada del modelo. A medida que nos alejamos del último dato observado, la banda se ensancha, lo cual es esperable debido al incremento en la incertidumbre de las predicciones a futuro. 10.3.1.2 Análisis: Prophet captura de manera eficaz los puntos de inflexión, como el cambio de tendencia en 2021. La forma suave de la línea azul muestra que el modelo considera transiciones graduales y no bruscas, propias de una tendencia modelada por tramos lineales con puntos de cambio. El descenso proyectado para el siguiente mes sugiere una continuación de la fase bajista iniciada a fines de 2021, en línea con lo estimado por los modelos ARIMA previos. La amplitud del intervalo de confianza refleja adecuadamente la alta volatilidad del índice. 10.4 Componentes del modelo Prophet prophet_plot_components(modelo_prophet, pronostico) 10.4.1 Descomposición de componentes · Prophet El gráfico superior presenta los componentes extraídos por el modelo Prophet a partir de la serie diaria del índice MSCI COLCAP. Esta descomposición permite analizar individualmente los efectos de la tendencia y la estacionalidad semanal, que influyen en la evolución del índice. 10.4.1.1 1. Tendencia global (trend) La línea del primer panel muestra cómo evoluciona la tendencia estructural del índice en el tiempo. Se identifica una fase ascendente sostenida desde mediados de 2020 hasta mediados de 2021, reflejando una etapa de recuperación post-pandemia en los mercados colombianos. A partir del segundo semestre de 2021 se observa una corrección progresiva, con una caída en la tendencia hacia valores cercanos a 1400 puntos. Esta componente es crucial, ya que modela cambios no lineales a través de puntos de cambio (changepoints) automáticamente detectados por Prophet. 10.4.1.2 2. Estacionalidad semanal (weekly) El segundo panel representa el efecto medio que cada día de la semana ejerce sobre el índice, una vez controlada la tendencia general. El patrón muestra: Un máximo relativo los martes, con un efecto positivo de más de 2 puntos. Domingos y sábados con efecto negativo, lo cual puede reflejar que, al no haber transacciones bursátiles esos días, el modelo los ajusta como parte del ciclo semanal. Una caída progresiva desde miércoles hasta sábado, con los viernes mostrando efecto negativo, posiblemente por efecto de toma de utilidades antes del cierre semanal. 10.4.1.3 Conclusión: La tendencia revela cambios estructurales a lo largo de los dos años analizados, con un máximo en 2021 y una reversión posterior. La estacionalidad semanal indica que existen patrones cíclicos intra-semana, lo que puede ser aprovechado para decisiones tácticas en portafolios activos. Esta descomposición enriquece la comprensión del comportamiento del COLCAP, permitiendo distinguir movimientos sistemáticos de los aleatorios y justificando el uso de Prophet como herramienta complementaria a los modelos ARIMA y Holt-Winters previamente ajustados. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
